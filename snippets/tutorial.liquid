{% comment %}
  ----> I COMMENTED THIS PART OF THE CODE TO NOT DELETE IT IN CASE I NEED IT TO STUDY LATER 

{% comment %} These are the types of varibales we can work with in shopify {% endcomment %}

{% comment %} String {% endcomment %}
 {%  assign my_string = "Hello world" %}
 {{ my_string }}, This string has {{ my_string.size }} characters
<br>
 {% comment %} numbers {% endcomment %}
  {%  assign my_number = 123 %}
  {% assign my_floating_point = 123.5 %}
{{ my_number }} , {{ my_floating_point }}
<br>
{% comment %} boolean {% endcomment %}
 {%  assign my_boolean = true %}
 {{ my_boolean }}

 <br>
 {% comment %} nil or null {% endcomment %}
  {% assign my_nil = null %}
  {{ my_nil }}
  
  {% comment %} conditional: As undefine_variable doesn't exist, it will show the message {% endcomment %}
   {% if undefine_variable == nil %}
     <p>Undefined variable is equal to nil</p>
   {% endif %}

   <br>

   {% comment %} Array {% endcomment %}
   the array has {{  product.tags.size }}  elements {% comment %} With this we can know the quantity of elements on a array or the number of chars on a string {% endcomment %}
   <br>
  {% comment %} loops {% endcomment %}
   {% for tag in product.tags %}
     {{ tag }} <br>
   {% endfor %}

   {% comment %} Objects {% endcomment %}
    <p>{{ product.title }}</p>

    {% comment %} Another way declare variables is with capture, everything between the tags will be the content of the variable, this is useful to render shopify varibales merged with html {% endcomment %}

    {% capture html %}
      <div> 
        <p> hello {{ product.title }}</p>
      </div>
    {% endcapture %}

    {{ html }}

    {% assign my_variable = 9 %}
    {% assign my_string_variable = 'hello' %}

    {% if my_variable > 10 %}
      <p> my_variable is greater than 10 </p>

      {% assign my_nested_variable = 20 %}
      <p> {{ my_nested_variable }}</p>

      {% elsif my_variable > 5 %}
        <p>my_varable is greater than 5</p>

        {% elsif my_variable > 3 %}
        <p>my_varable is greater than 3</p>
        
      {% else %}
        <p>my_variable not greater than 10 </p>
    {% endif %}

    {% if my_variable < 10 %}
      <p> my_variable is less than 10</p>
    {% endif %}

    {% if my_variable == 10 %}
      <p> my_variable is equal to 10 </p>
    {% endif %}

    {% if my_variable >= 10 %}
      <p> my_varibale is greater than or equal to 10 </p>
    {% endif %}

     {% if my_variable <= 10 %}
      <p> my_varibale is less than or equal to 10 </p>
    {% endif %}

    {% if my_string_variable == 'hello' %}
      <p> My string is hello</p>
    {% endif %}

    {% if my_string_variable != 'hello' %}
      <p> My string is not hello</p>
    {% endif %}

    {% comment %} contains operator ca be use to check if there is a subtext inside a string or an element in an array{% endcomment %}
    <p><b>{{ product.title }}</b></p>
    <p>{{ product.tags }}</p>

    {% if product.title contains 'Snowboard' %}
      <p> this is a Snowboard </p>
    {% endif %}

    {% if product.tags contains 'Winter' %}
      <p> This is a winter product </p>
    {% endif %}

    {% comment %} to negate contains or any if, instead of using the ! symbol we use unless {% endcomment %}

    {% unless product.tags contains "Premium" %}
      <p> This product doesn't contain the premium tag </p>
      {% else %}
        <p> This product contains the premium tag </p>
    {% endunless %}

    {% unless my_variable <= 10 %}
      <p> my_variable is greater than 10 </p>
      {% else %}
        <p> my variable is not greater than 10 </p>
    {% endunless %}

    {% comment %} logical operators, note: the prices in shopify are save in cents {% endcomment %}

    {% if product.title contains "Snowboard" and product.price < 65000 %}
      <p> This is an affordable snowboard </p>
    {% endif %}

    {% if product.title contains "Snowboard" or product.price < 65000 %}
      <p> This is an affordable snowboard </p>
    {% endif %}

    {% assign is_a_snowboard = false %}
    {% if product.title contains "Snowboard" or product.type == "Snowboard" %}
      {% assign is_a_snowboard = true %}
    {% endif %}

    {% if is_a_snowboard and product.price < 70000 %}
      <p> This is an affordable snowboard in a nested condition </p>
    {% endif %}

    {% comment %} Switch case, we use blank to check if the string is empty and not null or nil because those are use to check is a variable is undefined {% endcomment %}
     {% if product.type != blank %}
     {% case product.type %}
       {% when "snowboard" %}
         <p> Is a snowboard </p>
       {% when "ski wax" %}
         <p> Is a ski wax </p>
         {% when "gift card" %}
         <p> Is a gift card </p>
         {% else %}
          <p> Not known product type </p>
     {% endcase %}
     {% endif %}

     {% comment %} truthy and falsy, all data types must return either true or false. those which return true by default are called truthy. those which return false by default are called falsy {% endcomment %}

     {% if product.title %}
        <p> This is the product title: {{ product.title }}</p>
      {%  endif %}

      {% comment %} loops, the limit parameter set the limit for the loop to stop at, and the offset sets the starting point of the loop {% endcomment %}
       {% for product in collection.products limit: 5 offset: 1 %}
         <p style=" 
          {% if forloop.first %}
           color: green
           {% elsif forloop.last %}
            color: orange 
           {% endif %}
            "
            {% comment %}
              forloop.index is the number of the iteration of the loop started in one, if we want to start at 0 we use forloop.index0
            {% endcomment %}
        > <b>  {{ forloop.index }} - {{ product.title }}</b></p>
        {% if product.tags.size > 0 %}
            <h2> Tags </h2>
          <ul>
            {% for tag in product.tags %}
              {% comment %}
                forloop.parentloop.index take the value of the first loop we create inside the nested loops, if there are more loops inside the first loop we can use forloop.parentloop.parentloop as much as we need
                to get to the value we want
              {% endcomment %}
                {% if tag == "Accesory" %}
                  {% continue %}{% comment %} This continue the iteration at the specific point where the for is valid{% endcomment %}
                {% endif %}
              <li> Product Index {{ forloop.parentloop.index }} | {{ tag }} </li>
              {% if tag == "Sport" %}
                {% break %}{% comment %} This end the iteration at the specific point where the for is valid{% endcomment %}
              {% endif %}
            {% endfor %}
          </ul>
          
        {% endif %}
        {% else %}
             <p> This collection has no products </p>
       {% endfor %}

       {% for i in (11..15) %}
         <p> Hello World {{ i }} - {{ forloop.index }} </p>
       {% endfor %}

       {% comment %}
          Paginations
        {% endcomment %}
       {% paginate collection.products by 5 %}
        {% for product in collection.products %}
          <p>{{  product.title }} </p>
        {% endfor %}

        {{ paginate | default_pagination }}
      {% endpaginate %}

       I COMMENTED THIS PART OF THE CODE TO NOT DELETE IT IN CASE I NEED IT TO STUDY LATER <----


{% comment %}
  Filters
{% endcomment %}
 {% assign number_1 = 10 %}
 {% assign string_number = '10' %}

 {% assign number_2 = number_1 | plus: 5 %}
 {% assign number_3 = number_2 | minus: 10 %}
 {% assign number_4 = number_3 | times: 4 %}
 {% assign number_5 = number_4 | divided_by: 3 %}

 Plus: {{ number_2 }} - Minus:  {{ number_3 }} - Multiply: {{ number_4 }} - Divided: {{ number_5 }}

{% comment %}
  String are converted to  numbers by multiplying by 0, example: 
{% endcomment %}
{% assign string_to_number = string_number | plus: 0 %}

{% if string_to_number > 5 %}
  <p> The number {{ string_to_number }} is greater than 5 </p>
{% endif %}

{% comment %}
  Modulo = resto in Math: it will let us know if a value can ve even or odd (par o impar)
{% endcomment %}
{% assign modulo_number = number_1 | modulo: 2 %}

{% if modulo_number == 0 %}
  <p> Even </p>
  {% else %}
    <p> odd </p>
{% endif %}

{% comment %}
  Abs stands for absolute number
{% endcomment %}
{% assign my_abs_numer = -11 | abs %}
<p>{{ my_abs_numer }}</p>

{% comment %}
  round numbers
{% endcomment %}

{% assign round_number = 10.5 | round %}
<p>Rounded number by defualt goes upwards  {{ round_number }}</p>

{% assign round_number_f = 10.5 | floor %}
<p>Rounded number going downwards: {{ round_number_f }}</p>

{% assign round_number_c = 10.4 | ceil %}

<p> Rounded number going upwards by the nearest int val: {{ round_number_c }} </p>

{% comment %}
  capped numbers
{% endcomment %}
{% assign capped_number = 100 %}
{% assign capped_number_2 = 60 %}
<p> Capped number to be 80 of 100: {{ capped_number | at_most: 80 }} </p>
<p> Capped number to be 100 at least: {{ capped_number_2 | at_least: 100 }} </p>
 

  {%  comment %}
    String filters
  {% endcomment %}
   {% assign string_var = "Hello World" %}
   {% assign string_var_2 = " From Accel" %}
   {% assign string_with_white_space = " This HAs White Space  " %}
   {% assign my_html_var = "<p style='color: red'> My text Html removed with some very long text </p>" %}
   {% assign my_long_string = "This is some long text that will be trimmed" %}
   {% assign my_multiline_text = 
      "
        This is my first line
        This is my second line
        This is my third line
      " %}
    {% assign new_text = "This is some text" %}
    {% assign new_text_2 = "This is some text some text" %}
    {% assign my_str_numbers = "1,2,3,4" | split: "," %}
    {% assign lenguage_var = "html|orange,css|blue,javascript|yellow" | split: "," %}
 
   <p>{{ string_var | upcase }}</p>{% comment %} UPPER CASE {% endcomment %}
   <p>{{ string_var| downcase }}</p> {% comment %} Lower case{% endcomment %}
   <p> {{ string_var | capitalize }} </p> {% comment %} To make the first letter uppercase{% endcomment %}
   <p> {{ string_var | append: string_var_2 }}</p> {% comment %} To concat two or more strings {% endcomment %}

   <p> {{ string_with_white_space | strip  | append: "!" }} </p> {% comment %} The strip filter remove white spaces{% endcomment %}
   <p> {{ my_html_var | strip_html }} </p>
   <p> {{ my_long_string | truncate: 20, "!" }} </p> {% comment %}to truncate a specific quantity of charactes, the second argument is to specify the finish char of the text. by default is ... {% endcomment %}
   <p> {{ my_long_string |truncatewords: 3, "?" }}</p> {% comment %}To truncate a specific quantity of words, the second argument is to specify the finish char of the text. by default is ...{% endcomment %}

   <p> {{ my_html_var | strip_html | truncatewords: 4 }} </p> {% comment %} We can mix the two filers when in need of just keep the text inside a html part {% endcomment %}

   <p> {{ my_multiline_text | newline_to_br }} </p> {% comment %} to make a br at the end of every line of text {% endcomment %}
   <p> {{ new_text | replace: "text", "long text" }}</p>
   <p> {{ new_text_2 | replace_first: "text", "Poem" }} </p>
   <p> {{ new_text_2 | replace_last: "text", "Poem" }} </p>
   <p> {{ new_text_2 |remove: "text" }}</p>
   <p> {{ new_text_2 |remove_first: "text" }}</p>
   <p> {{ new_text_2 |remove_last: "text" }}</p>

    {% for number in my_str_numbers %}
      <p> {{ number }} </p>
    {% endfor %}

    {% for l in lenguage_var %}
      {% assign language_name = l |split: "|" | first %}
      {% assign language_color = l |split: "|" | last %}
      <p style="color: {{ language_color }} "> {{ language_name }} </p>
    {% endfor %}
      

{% assign products = collection.products %}
{% assign product_titles = products | map: 'title' %}
{% assign product_titles_reverse = products | map: 'title' | reverse %}

{% for p in product_titles %}
  <p>{{ p }} </p>
{% endfor %}

{{ product_titles | join: " - " }}

{% for p2 in product_titles_reverse %}
  <p> {{ p2 }} </p>
{% endfor %}

<p> First item {{ product_titles | first }} </p> {% comment %} First item{% endcomment %}
<p> last item {{ product_titles | last }}</p> {% comment %}Last item {% endcomment %}
<p> Size of the array: {{ product_titles | size }} </p> {% comment %}The size of the array{% endcomment %}
{% comment %}
  another way of use these filters is...
{% endcomment %}

<p>{{ product_titles.first }}</p>
<p>{{ product_titles.last }} </p>
<p>{{ product_titles.size }} </p>

{% comment %}
  the before example is useful when trying to use in an if statement
{% endcomment %}

{% if product_titles.size > 5 %}
  <p> El titulo es  {{ product_titles }} </p>
{% endif %}

{% comment %}
  The Sort filter
{% endcomment %}

{% assign price_sorted_items = products |sort: 'price' %}

 {% for pr in price_sorted_items %}
   <p> {{ pr.title }} - {{ pr.price | money }} </p>
 {% endfor %}

 {% assign all_prices = products | map: 'price' | sort %}

 {%  for ap in all_prices %}
   <p> {{ ap | money }} </p>
 {% endfor %}

 {% comment %}
   to sum all prices in the array
 {% endcomment %}

 {% assign sum_prices = all_prices | sum %}

 <p> total prices: {{ sum_prices |money }} </p>

 {% comment %}
   To find an specific item in the array we use where
 {% endcomment %}

 {% assign snowboard_2 = products | where: 'title', 'The Complete Snowboard' | first %}
 <p> es:  {{snowboard_2.title }} - {{ snowboard_2.price | money }} </p>

{% comment %}
  To get all the tags in a product
{% endcomment %}

{% assign tags = "" %}
{% for p3 in products %}
  {% for t in p3.tags %}
    {% assign tags  = tags | append: t| append: "  " %}
  {% endfor %}
{% endfor %}

<p> {{ tags | split: "  " | uniq | join: " " }} </p>
{% endcomment %}